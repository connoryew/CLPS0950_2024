% CLPS0950 Group Project: Blackjack (w/ Basic Strategy Recommendations)
% Group Members: Nicole Chen, Jilienne Widener, Connor Yew
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% SETTING UP THE GAME
shuffle_card = randperm(52); % "Shuffles" the deck by creating a 1x52 vector of random permutations of integers 1-52
player_raw_hand = shuffle_card(1:2:3); % Deals the 1st and 3rd values from the vector shuffle_card to the player
dealer_raw_hand = shuffle_card(2:2:4); % Deals the 2nd and 4th values from the vector shuffle card to the dealer
card_value = zeros(1,52); % Initializes a 1x52 vector of zeroes for the values of the cards

for card_number = 1:52
    posit_value = mod(card_number, 13); % Uses the modulo operation to find the position value in the deck, which we'll map to the game value
    if posit_value == 1 % We're using the modulo operator to find the first card of each 13-card "suit", so the cards in positions 1, 14, 27, etc. are defined as Aces and set to value 11
        tmp_card_value = 11; % NOTE: We might need to change this later to account for the fact that aces can be either 11 or 1 depending on whether it would lead the player to bust.
    elseif posit_value > 10 || posit_value == 0 % Uses the modulo operation to pick out the J, Q, and K positions for each suit and sets them to value 10
        tmp_card_value = 10;
    else
        tmp_card_value = posit_value; % Defines the rest of the cards, which should be the number cards 2-10 to be equal to their face value.
    end
    card_value(card_number) = tmp_card_value; % Fills in the initialized vector card_value with the newly calculated values temporarily held in tmp_card_value.
end

player_hand = card_value(player_raw_hand); % Finds the values of the two cards that were dealt to the player in player_raw_hand
player_total = sum(card_value(player_raw_hand)); % Totals the values of the two cards to calculate an initial player total
dealer_hand = card_value(dealer_raw_hand); % Finds the values of the dealer's hand
dealer_first_card = card_value(dealer_hand(1)); % Finds the value of the first/up card of the dealer's hand

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% TESTING/DEBUGGING w/ Set Initial Values
% dealer_first_card = [ ];
% player_total = [ ];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% DISPLAYING INITIAL GAME VALUES: Player Hand, Player Total, and Dealer Up-Card
disp(['Your Initial Cards: ', num2str(player_hand)]);
disp(['Your Total: ', num2str(player_total)]);
disp (['Dealer''s Up-Card: ', num2str(dealer_first_card)]);
basic_strat_recommendation = basic_strategy (dealer_first_card,player_total);
disp (['We recommend that you: ', basic_strat_recommendation]);
% We might want to eventually add some lines here that use imagesc and subplot to create a figure for the game table that we can update with each hit
% We would also need to  upload the 52 images for the face of each possible card in the deck + an image of the back of a card for the dealer's down-card

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% HIT/STAND/DOUBLE LOGIC:

shuffle_card = shuffle_card(5:end); % Since the first four cards are already dealt, we can remove them by starting from the fifth card

%round two
%player's decision pathways
while true
    user_input = input('Do you want to HIT (h), DOUBLE (d), or STAND (s)? ', 's'); % Asking for player input to determine if they want to hit, double down, or stand

    if user_input == 'h' % Player chooses to HIT

        player_raw_hand(end+1) = shuffle_card(1); % Adds the first available card stored in shuffle_card to the player's raw hand
        shuffle_card(1) = []; % Removes the drawn card from the deck for future play.
        
        % Uses similar logic from the game setup portion to update the values of player_hand and recalculate player_total
        player_hand = card_value(player_raw_hand);
        player_total = sum(player_hand);

        % Checks if the player has busted with their new total
        if player_total > 21
            disp('Bust! You lose :(');
            break; % Breaks out of the loop and ends the game if the player busts
        end

        % Reruns the Hard Total Basic Strategy w/ the new total
        basic_strat_recommendation = basic_strategy(dealer_first_card,player_total);

        % Displays post-hit player cards, new player total and gives a new basic strategy recommendation
        disp(['Your Current Cards: ', num2str(player_hand)]);
        disp(['Your Total: ', num2str(player_total)]);
        disp (['Dealer''s Up-Card: ', num2str(dealer_first_card)]);
        disp (['We recommend that you: ', num2str(basic_strat_recommendation)]);

    elseif user_input == 'd' % Player chooses to DOUBLE DOWN
        player_raw_hand(end+1) = shuffle_card(1); % Adds the first available card stored in shuffle_card to the player's raw hand
        shuffle_card(1) = []; % Removes the drawn card from the deck for future play.

       % Uses similar logic from the game setup portion to update the values of player_hand and recalculate player_total
        player_hand = card_value(player_raw_hand);
        player_total = sum(player_hand);
       
        % Checks if the player has busted with their new total
        if player_total > 21
            disp(player_total);
            disp('Bust! You lose :(');
            break; % Breaks out of the loop and ends the game if the player busts
        end

        % Displays post-double player cards and new player total before breaking and heading to dealer showdown
        disp(['Your Current Cards: ', num2str(player_hand)]);
        disp(['Your Total: ', num2str(player_total)]);
        disp (['Dealer''s Up-Card: ', num2str(dealer_first_card)]);
        break;

    elseif user_input == 's' % Player chooses to STAND
        break; % We break the loop and proceed with the dealer showdown code

    else % Accounting for cases where people dont pick an ideal h/d/s key.
        disp('Invalid input. Please choose "h" to HIT, "d" to DOUBLE, or "s" to STAND.');
    end    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DEALER SHOWDOWN (Performed once the player has stood or finished doubling down)

dealer_second_card = card_value(dealer_hand(2)); %now creating dealer 2nd card variable 
disp(['Dealer''s Down-Card: ', num2str(dealer_second_card)]); %showing dealer 2nd card
dealer_total = sum(card_value(dealer_raw_hand)); %now calculating dealer total (remember, this is all code for their first two cards because dealer hasn't done anything since)
disp(['Dealer"s Total: ', num2str(dealer_total)]); %displaying dealer total

%probably should make this into a four loop because imagine they keep
%getting like 2s 
while dealer_total < 16
    disp('Dealer Hits!');
    dealer_raw_hand(end+1) = shuffle_card(1); % Adds the first available card stored in shuffle_card to the player's raw hand
    shuffle_card(1) = []; %removing the next available card
    dealer_hand = card_value(dealer_raw_hand); %updating dealer hand
    dealer_total = sum(card_value(dealer_hand)); %summing their total with their 3rd (total after 1st hit for n hits)
    if dealer_total > 21
        disp(['Dealer''s Total: ', num2str(dealer_total)]);
        disp('Dealer Busts. You win!');
        break; % Breaks out of the loop and ends the game if the dealer busts
    end
    disp(['Dealer''s Hand: ', num2str(dealer_hand)]); 
    disp(['Dealer''s Total: ', num2str(dealer_total)]); 
end

if (dealer_total >= 17) && (dealer_total <= 21)
    disp('Dealer Stands');
end

% Calculate the game outcome
if (player_total <= 21) && (dealer_total <= 21)
if (player_total > dealer_total) && 
    outcome = strcat('You have', {' '}, num2str(player_total),', and the dealer has ', {' '},num2str(dealer_total),'. You win!');
    disp (outcome);
elseif player_total < dealer_total
    outcome = strcat('You have', {' '}, num2str(player_total),', and the dealer has ', {' '}, num2str(dealer_total),'. You lose :(');
    disp (outcome);
elseif player_total == dealer_total
    outcome = strcat('You have ', {' '}, num2str(player_total),', and the dealer has', {' '}, num2str(dealer_total),'. You push');
    disp (outcome);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% HARD TOTALS BASIC STRATEGY FUNCTION:
function [basic_strat_recommendation] = basic_strategy(dealer_first_card,player_total)

basic_strat_recommendation = ' ';

if dealer_first_card >= 2 && dealer_first_card <=6
    if player_total >= 17
        basic_strat_recommendation = 'STAND';
    elseif player_total >= 13 && player_total <=17
        basic_strat_recommendation = 'STAND';
    elseif player_total == 12 && (dealer_first_card == 2 || dealer_first_card == 3)
        basic_strat_recommendation = 'HIT';
    elseif (player_total == 12) && (dealer_first_card == 4 || dealer_first_card == 5 || dealer_first_card == 6)
        basic_strat_recommendation = 'STAND';
    end
elseif (dealer_first_card >= 7) && (dealer_first_card <= 11)
    if player_total >= 17
        basic_strat_recommendation = 'STAND';
    elseif player_total >= 12 && player_total <=16
        basic_strat_recommendation = 'HIT';
    end
end

if player_total == 11 % There's some missing scenarios here, but I'll find and fix those during class tomorrow.
    if dealer_first_card >= 2 && dealer_first_card <= 10
        basic_strat_recommendation = 'DOUBLE';
    elseif dealer_first_card == 1 
        basic_strat_recommendation = 'DOUBLE';
    end 
elseif player_total == 10 
    if dealer_first_card == 10 || dealer_first_card == 1 
        basic_strat_recommendation = 'HIT';
    elseif dealer_first_card >= 2 && dealer_first_card <= 9
        basic_strat_recommendation = 'DOUBLE';
    end
elseif player_total == 9 
    if dealer_first_card >= 3 && dealer_first_card <= 6
        basic_strat_recommendation = 'DOUBLE';
    else
        basic_strat_recommendation = 'HIT';
    end
elseif player_total == 8 
    basic_strat_recommendation = 'HIT';
end

% Still need to code for hard totals < 8! I imagine it'll be all hits, but
% I'll double check that and add it in. 

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% CURRENT PLACE: 

% Double Down and Hit logic have been successfully coded for one round of
% play. Basic strategy recommendations are being offered with each
% additional card dealt to the player. Just added code for the dealer
% showdown, but we still have issues with things running after the game is
% supposed to end

% NEXT STEPS:

% Code in the card images and have them display during the DISPLAY INITIAL
% GAME VALUES and after each hit:
%   1. Use figure, imagesc, and subplot to get the card images where you
%   want them. Dealer should be easy until showdown because it'll just stay
%   as one face-up and one face-down.
%   2. Find a way to accomodate multiple hits. I have no idea what we're
%   going to do about splits (both gameplay and card image-wise)...

% Find a way to prevent Dealer Stands conditional from runnning after the
% dealer busts, and find a way for the game to end after the player busts
% (ie. the showdown conditionals don't run!)

% Maybe find a way to use a loop to limit the amount of repetitive
% copy-pasting needed for the hit logic and basic strategy calculations in
% subsequent rounds?
